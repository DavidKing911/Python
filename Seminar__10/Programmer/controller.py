import logs, operation, time
from configs import TOKEN
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

CHOICE, ADD, SEARCH, VIEW, SERNAME, PHONE_NUMBER, COMMENT = range(7)

def start(update, _):
    """
    –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    reply_keyboard = [['üìî ADD','üïµ‚Äç‚ôÇ SEARCH', 'üìö VIEW ALL','üö™ EXIT']]
    markup_key = ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–æ–π?', reply_markup=markup_key)
    return CHOICE

def choice(update, _):
    """
    –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    text = update.message.text
    keyboard_remove = ReplyKeyboardRemove()
    logs.logger("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é", text)
    if text == 'üìî ADD':
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è', reply_markup=keyboard_remove)
        return ADD
    if text == 'üïµ‚Äç‚ôÇ SEARCH':
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –≤–∞–º –¥–∞–Ω–Ω—ã–µ', reply_markup=keyboard_remove)
        return SEARCH
    if text == 'üìö VIEW ALL':
        update.message.reply_text('–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=keyboard_remove)
        update.message.reply_text('PS: –ø–∞—Ä–æ–ª—å - 12345')
        return VIEW
    if text == 'üöÄ CONTINUE':
        return start(update, _)
    if text == 'üö™ EXIT':
        update.message.reply_text(f'–ü—Ä–∏—è—Ç–Ω–æ –±—ã–ª–æ –∏–º–µ—Ç—å —Å –≤–∞–º–∏ –¥–µ–ª–æ, {update.effective_user.first_name}', reply_markup=keyboard_remove)
        return cancel()

def add(update, _):
    global list_add
    list_add = []
    text = update.message.text
    list_add.append(text)
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
    return SERNAME

def sername(update, _):
    text = update.message.text
    list_add.append(text)
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    return PHONE_NUMBER

def phone_number(update, _):
    text = update.message.text
    list_add.append(text)
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    return COMMENT

def comment(update, _):
    text = update.message.text
    list_add.append(text)
    logs.logger("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ", list_add)
    operation.write_csv(list_add)
    update.message.reply_text('–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
    time.sleep(1)
    reply_keyboard = [['üöÄ CONTINUE','üö™ EXIT']]
    markup_key = ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–æ–π –∏–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –æ–∫–æ–Ω—á–∏—Ç—å —Å–µ–∞–Ω—Å?', reply_markup=markup_key)
    return CHOICE

def search(update, _):
    text = update.message.text
    result = operation.search_csv(text)
    resultat = "\n\n".join(result)
    if result == '–î–∞–Ω–Ω—ã–µ –æ—Å—É—Ç—Å—Ç–≤—É—é—Ç':
        update.message.reply_text(result)
    else:
        update.message.reply_text(f'–í–æ—Ç –≤—Å—ë, —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n{resultat}')
    time.sleep(1)
    reply_keyboard = [['üöÄ CONTINUE','üö™ EXIT']]
    markup_key = ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–æ–π –∏–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –æ–∫–æ–Ω—á–∏—Ç—å —Å–µ–∞–Ω—Å?', reply_markup=markup_key)
    return CHOICE

def view(update, _):
    text = update.message.text
    result = operation.read_csv()
    if text == '12345':
        update.message.reply_text(f'–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π)')
        resultat = '\n\n'.join(str(l) for l in result)
        time.sleep(1)
        update.message.reply_text(f'–í–æ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n{resultat}')
    else:
        update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π)')
    time.sleep(1)
    reply_keyboard = [['üöÄ CONTINUE','üö™ EXIT']]
    markup_key = ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–æ–π –∏–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –æ–∫–æ–Ω—á–∏—Ç—å —Å–µ–∞–Ω—Å?', reply_markup=markup_key)
    return CHOICE

def cancel():
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    """
    logs.logger(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª', 'THE END')
    return ConversationHandler.END

if __name__ == '__main__':
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOICE: [MessageHandler(Filters.text, choice)],
            ADD: [MessageHandler(Filters.text, add)],
            SEARCH: [MessageHandler(Filters.text, search)],
            VIEW: [MessageHandler(Filters.text, view)],
            SERNAME: [MessageHandler(Filters.text, sername)],
            PHONE_NUMBER: [MessageHandler(Filters.text, phone_number)],
            COMMENT: [MessageHandler(Filters.text, comment)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dispatcher.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()